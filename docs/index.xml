<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sanjay</title>
    <link>https://Sanjay-V.github.io/mlnotes/</link>
    <description>Recent content on Sanjay</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://Sanjay-V.github.io/mlnotes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bar Plot</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/matplotlib/bar-plot/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/matplotlib/bar-plot/</guid>
      <description># Importing Matplotlib library from matplotlib import pyplot as plt # x-axis values  x = [15, 20, 39, 44] # y-axis values  y = [10, 35, 58, 64] # Function to plot x and y values plt.bar(x,y) # Function to show the plot  plt.show()  </description>
    </item>
    
    <item>
      <title>Histogram</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/matplotlib/histogram/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/matplotlib/histogram/</guid>
      <description># Importing Matplotlib library from matplotlib import pyplot as plt # y-axis values  y = [10, 35, 58, 64] # Function to plot y values plt.hist(y) # Function to show the plot  plt.show()  </description>
    </item>
    
    <item>
      <title>Line Plot</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/matplotlib/line-plot/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/matplotlib/line-plot/</guid>
      <description># Importing Matplotlib library from matplotlib import pyplot as plt # x-axis values  x = [15, 20, 39, 44, 76] # y-axis values  y = [10, 35, 58, 64, 42] # Function to plot x and y values plt.plot(x,y) # Function to show the plot  plt.show()  </description>
    </item>
    
    <item>
      <title>Linear Plot with Line Formatting</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/matplotlib/linear-plot-with-line-formatting/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/matplotlib/linear-plot-with-line-formatting/</guid>
      <description># Importing Matplotlib library from matplotlib import pyplot as plt # Assigning values  Year = [1975, 1983, 1999, 2006, 2017] TamilNadu = [130.6, 158.61, 355.54, 384.76, 754.60] Assam = [10.4, 25.56, 58.75, 178.27, 254.87]# Formatting of line style and Plotting of co-ordinates  plt.plot(Year, TamilNadu, color =&amp;#39;orange&amp;#39;, marker =&amp;#39;o&amp;#39;, markersize = 10, label =&amp;#39;Tamil Nadu&amp;#39;) plt.plot(Year, Assam, color =&amp;#39;g&amp;#39;, linestyle =&amp;#39;dashed&amp;#39;, linewidth = 3, label =&amp;#39;Assam&amp;#39;) # Labelling the plot plt.</description>
    </item>
    
    <item>
      <title>Scatter Plot</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/matplotlib/scatter-plot/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/matplotlib/scatter-plot/</guid>
      <description># Importing Matplotlib library from matplotlib import pyplot as plt # x-axis values  x = [15, 20, 39, 44] # y-axis values  y = [10, 35, 58, 64] # Function to plot x and y values plt.scatter(x,y) # Function to show the plot  plt.show()  </description>
    </item>
    
    <item>
      <title>Accuracy Score</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/sklearn/accuracy-score/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/sklearn/accuracy-score/</guid>
      <description># Import Numpy library  import numpy as np# Initialize list values y_pred = [0, 2, 0, 2, 1,3] y_true = [0, 2, 3, 2, 1,3]# Importing Accuracy Score metric from sklearn from sklearn.metrics import accuracy_score# Identifying accuracy_score and printing it out score = accuracy_score(y_true, y_pred) print(score) 0.8333333333333334  # Returns the number of correctly classified samples score = accuracy_score(y_true, y_pred, normalize=False) print(score) 5  </description>
    </item>
    
    <item>
      <title>Array Characteristics</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/numpy/array-characteristics/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/numpy/array-characteristics/</guid>
      <description># Importing numpy library import numpy as np# Creating array object arr = np.array( [[ 71, 82, 53], [ 48, 23, 56]] )# Printing type of arr object print(&amp;#34;Array is of type: &amp;#34;, type(arr)) Array is of type: &amp;lt;class &#39;numpy.ndarray&#39;&amp;gt;  # Printing array dimensions (axes) print(&amp;#34;No. of dimensions: &amp;#34;, arr.ndim) No. of dimensions: 2  # Printing shape of array print(&amp;#34;Shape of array: &amp;#34;, arr.shape) Shape of array: (2, 3)  # Printing size (total number of elements) of array print(&amp;#34;Size of array: &amp;#34;, arr.</description>
    </item>
    
    <item>
      <title>Array Operations</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/numpy/array-operations/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/numpy/array-operations/</guid>
      <description># Importing numpy library import numpy as np# Defining Array A A = np.array([[17, 23], [34, 46]])# Defining Array B B = np.array([[48, 39], [25, 14]])# Adding 5 to every element in Array A print(&amp;#34;Adding 5 to every element in Array A:&amp;#34;, A + 5) Adding 5 to every element in Array A: [[22 28] [39 51]]  # Subtracting 2 from each element print(&amp;#34;\nSubtracting 2 from each element of Array B:&amp;#34;, B - 2) Subtracting 2 from each element of Array B: [[46 37] [23 12]]  # Sum of Array A elements performing Unary operations print (&amp;#34;\nSum of all array A elements: &amp;#34;, A.</description>
    </item>
    
    <item>
      <title>Binary Operations</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/numpy/binary-operations/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/numpy/binary-operations/</guid>
      <description># Importing numpy library import numpy as np# Creating array A A = np.array( [[ 71, 82], [ 48, 23]] )# Creating array B B = np.array([[5, 2], [3, 7]])# Adding arrays and printing it out print(&amp;#34;Array sum:\n&amp;#34;, A + B) Array sum: [[76 84] [51 30]]  # Multiply arrays A and B (elementwise multiplication) print(&amp;#34;Array multiplication:\n&amp;#34;, A*B) Array multiplication: [[355 164] [144 161]]  # Multiply arrays A and B (matrix multiplication) print(&amp;#34;Matrix multiplication:\n&amp;#34;, A.</description>
    </item>
    
    <item>
      <title>Conditional operation on Pandas Dataframe columns</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/conditional-operation-on-pandas-dataframe-columns/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/conditional-operation-on-pandas-dataframe-columns/</guid>
      <description># Import pandas library  import pandas as pd# Create pandas dataframe  data = pd.DataFrame({&amp;#39;Date&amp;#39;:[&amp;#39;10/2/2020&amp;#39;, &amp;#39;11/2/2020&amp;#39;, &amp;#39;12/2/2020&amp;#39;, &amp;#39;13/2/2020&amp;#39;], &amp;#39;Product&amp;#39;:[&amp;#39;Umbrella&amp;#39;, &amp;#39;Matress&amp;#39;, &amp;#39;Badminton&amp;#39;, &amp;#39;Shuttle&amp;#39;], &amp;#39;Last Price&amp;#39;:[1200, 1500, 1600, 352], &amp;#39;Updated Price&amp;#39;:[1300, 1400, 1550, 600], &amp;#39;Discount&amp;#39;:[10, 10, 10, 10]}) # Print the dataframe  print(data)   Date Product Last Price Updated Price Discount 0 10/2/2020 Umbrella 1200 1300 10 1 11/2/2020 Matress 1500 1400 10 2 12/2/2020 Badminton 1600 1550 10 3 13/2/2020 Shuttle 352 600 10  # Condition - Check if the updated price is available or not  if &amp;#39;Updated Price&amp;#39; in data.</description>
    </item>
    
    <item>
      <title>Confusion Matrix</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/sklearn/confusion-matrix/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/sklearn/confusion-matrix/</guid>
      <description># Import Numpy library  import numpy as np# Initialize list values y_pred = [0, 2, 0, 2, 1,3] y_true = [0, 2, 3, 2, 1,3]# Importing confusion_matrix metric from sklearn from sklearn.metrics import confusion_matrix# Printing out the confusion matrix matrix = confusion_matrix(y_true, y_pred) print(matrix) [[1 0 0 0] [0 1 0 0] [0 0 2 0] [1 0 0 1]]  </description>
    </item>
    
    <item>
      <title>Creating Pandas Dataframe using list of lists</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/creating-pandas-dataframe-using-list-of-lists/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/creating-pandas-dataframe-using-list-of-lists/</guid>
      <description># Import pandas library  import pandas as pd# Initialize list of lists  lst = [[&amp;#39;Numpy&amp;#39;, 10], [&amp;#39;Pandas&amp;#39;, 15], [&amp;#39;Matplotlib&amp;#39;, 20]] # Print list of lists  print(lst) [[&#39;Numpy&#39;, 10], [&#39;Pandas&#39;, 15], [&#39;Matplotlib&#39;, 20]]  # Create the pandas DataFrame  data = pd.DataFrame(lst, columns = [&amp;#39;Tech&amp;#39;, &amp;#39;Points&amp;#39;]) # Print dataframe  print(data)   Tech Points 0 Numpy 10 1 Pandas 15 2 Matplotlib 20  </description>
    </item>
    
    <item>
      <title>Creating a Dataframe from Pandas Series</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/creating-a-dataframe-from-pandas-series/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/creating-a-dataframe-from-pandas-series/</guid>
      <description># Import pandas library  import pandas as pd# Initialize lists values students = [&amp;#39;Steven&amp;#39;, &amp;#39;James&amp;#39;, &amp;#39;Ronald&amp;#39;, &amp;#39;Han&amp;#39;] marks = [90, 95, 65, 73] # Print students list values print(student) [&#39;Steven&#39;, &#39;James&#39;, &#39;Ronald&#39;, &#39;Han&#39;]  # Print marks list values print(marks) [90, 95, 65, 73]  # Importing Series from Pandas for students list and printing it out students = pd.Series(students) marks = pd.Series(marks) print(students) 0 Steven 1 James 2 Ronald 3 Han dtype: object  # Importing Series from Pandas for marks list and printing it out marks = pd.</description>
    </item>
    
    <item>
      <title>Creating a Numpy Array</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/numpy/creating-a-numpy-array/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/numpy/creating-a-numpy-array/</guid>
      <description># Importing numpy library import numpy as np# Creating a rank 1 Array and printing it out arr = np.array([99, 47, 38]) print(&amp;#34;Array with Rank 1: \n&amp;#34;,arr) Array with Rank 1: [99 47 38]  # Creating a rank 2 Array and printing it out arr = np.array([[11, 27, 35], [46, 52, 64]]) print(&amp;#34;Array with Rank 2: \n&amp;#34;, arr) Array with Rank 2: [[11 27 35] [46 52 64]]  # Creating an array from tuple and printing it out arr = np.</description>
    </item>
    
    <item>
      <title>Creating a Pandas Dataframe using list of dicts</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/creating-a-pandas-dataframe-using-list-of-dicts/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/creating-a-pandas-dataframe-using-list-of-dicts/</guid>
      <description># Import pandas library  import pandas as pd# Initialize list of dicts  data = [{&amp;#39;Raghul&amp;#39;: 90, &amp;#39;Ramesh&amp;#39;: 85, &amp;#39;Steven&amp;#39;: 70}, {&amp;#39;Raghul&amp;#39;: &amp;#39;O&amp;#39;, &amp;#39;Ramesh&amp;#39;: &amp;#39;A+&amp;#39;, &amp;#39;Steven&amp;#39;: &amp;#39;A&amp;#39;}] # Print list of dicts  print(data) [{&#39;Raghul&#39;: 90, &#39;Ramesh&#39;: 85, &#39;Steven&#39;: 70}, {&#39;Raghul&#39;: &#39;O&#39;, &#39;Ramesh&#39;: &#39;A+&#39;, &#39;Steven&#39;: &#39;A&#39;}]  # Create the pandas DataFrame  data = pd.DataFrame(data, index =[&amp;#39;Marks&amp;#39;, &amp;#39;Grade&amp;#39;]) # Print dataframe  print(data)   Raghul Ramesh Steven Marks 90 85 70 Grade O A+ A  </description>
    </item>
    
    <item>
      <title>Creating a Pandas Dataframe using list of tuples</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/creating-a-pandas-dataframe-using-list-of-tuples/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/creating-a-pandas-dataframe-using-list-of-tuples/</guid>
      <description># Import pandas library  import pandas as pd# Initialize list of tuples lst = [(&amp;#39;Numpy&amp;#39;, 10), (&amp;#39;Pandas&amp;#39;, 15), (&amp;#39;Matplotlib&amp;#39;, 20), (&amp;#39;Scikit-Learn&amp;#39;, 25)] # Print list of tuples  print(lst) [(&#39;Numpy&#39;, 10), (&#39;Pandas&#39;, 15), (&#39;Matplotlib&#39;, 20), (&#39;Scikit-Learn&#39;, 25)]  # Create the pandas DataFrame  data = pd.DataFrame(lst, columns = [&amp;#39;Tech&amp;#39;, &amp;#39;Points&amp;#39;]) # Print dataframe  print(data)   Tech Points 0 Numpy 10 1 Pandas 15 2 Matplotlib 20 3 Scikit-Learn 25  </description>
    </item>
    
    <item>
      <title>Creating a Pandas Dataframe using string data</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/creating-a-pandas-dataframe-using-string-data/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/creating-a-pandas-dataframe-using-string-data/</guid>
      <description># Import pandas library  import pandas as pd# Importing StringIO function from io module  from io import StringIO # Wrap the string data in StringIO function and store it in a variable data = StringIO(&amp;#34;&amp;#34;&amp;#34;Date;Exam;Marks 10/2/2020;Maths;100 11/2/2020;Physics;95 12/2/2020;Chemistry;80 13/2/2020;ComputerScience;85 &amp;#34;&amp;#34;&amp;#34;) # Read the data using Pandas read_csv() function  data = pd.read_csv(data, sep =&amp;#34;;&amp;#34;) # Print dataframe  print(data)   Date Exam Marks 0 10/2/2020 Maths 100 1 11/2/2020 Physics 95 2 12/2/2020 Chemistry 80 3 13/2/2020 ComputerScience 85  </description>
    </item>
    
    <item>
      <title>Dropping columns of a Pandas Dataframe</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/dropping-columns-of-a-pandas-dataframe/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/dropping-columns-of-a-pandas-dataframe/</guid>
      <description># Import pandas library  import pandas as pd# Create pandas dataframe  data = pd.DataFrame({&amp;#39;Date&amp;#39;:[&amp;#39;10/2/2020&amp;#39;, &amp;#39;11/2/2020&amp;#39;, &amp;#39;12/2/2020&amp;#39;, &amp;#39;13/2/2020&amp;#39;], &amp;#39;Product&amp;#39;:[&amp;#39;Umbrella&amp;#39;, &amp;#39;Matress&amp;#39;, &amp;#39;Badminton&amp;#39;, &amp;#39;Shuttle&amp;#39;], &amp;#39;Last Price&amp;#39;:[1200, 1500, 1600, 352], &amp;#39;Updated Price&amp;#39;:[1300, 1400, 1550, 600], &amp;#39;Discount&amp;#39;:[10, 10, 10, 10]}) # Print the dataframe  print(data)   Date Product Last Price Updated Price Discount 0 10/2/2020 Umbrella 1200 1300 10 1 11/2/2020 Matress 1500 1400 10 2 12/2/2020 Badminton 1600 1550 10 3 13/2/2020 Shuttle 352 600 10  # Dropping column of dataframe data = data.</description>
    </item>
    
    <item>
      <title>Getting column names of a Pandas Dataframe</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/getting-column-names-of-a-pandas-dataframe/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/getting-column-names-of-a-pandas-dataframe/</guid>
      <description># Import pandas library  import pandas as pd# Initialize list of dicts  data = [{&amp;#39;Mark&amp;#39;: 90, &amp;#39;Grade&amp;#39;: &amp;#34;O&amp;#34;, &amp;#39;Comments&amp;#39;: &amp;#34;Best&amp;#34;}, {&amp;#39;Mark&amp;#39;: 75, &amp;#39;Grade&amp;#39;: &amp;#34;A&amp;#34;, &amp;#39;Comments&amp;#39;: &amp;#34;Needs to be immproved&amp;#34;}] # Print list of dicts  print(data) [{&#39;Mark&#39;: 90, &#39;Grade&#39;: &#39;O&#39;, &#39;Comments&#39;: &#39;Best&#39;}, {&#39;Mark&#39;: 75, &#39;Grade&#39;: &#39;A&#39;, &#39;Comments&#39;: &#39;Needs to be immproved&#39;}]  # Create the pandas DataFrame  data = pd.DataFrame(data, index =[&amp;#39;Stephen&amp;#39;, &amp;#39;Jerry&amp;#39;]) # Print dataframe  print(data)   Mark Grade Comments Stephen 90 O Best Jerry 75 A Needs to be immproved  # iterating the columns  for col in data.</description>
    </item>
    
    <item>
      <title>Getting unique values from a column in Pandas Dataframe</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/getting-unique-values-from-a-column-in-pandas-dataframe/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/getting-unique-values-from-a-column-in-pandas-dataframe/</guid>
      <description># Import pandas library  import pandas as pd# Initialize list of dicts  data = [{&amp;#39;Mark&amp;#39;: 90, &amp;#39;Grade&amp;#39;: &amp;#34;O&amp;#34;, &amp;#39;Comments&amp;#39;: &amp;#34;Best&amp;#34;}, {&amp;#39;Mark&amp;#39;: 75, &amp;#39;Grade&amp;#39;: &amp;#34;A&amp;#34;, &amp;#39;Comments&amp;#39;: &amp;#34;Needs to be immproved&amp;#34;}, {&amp;#39;Mark&amp;#39;: 40, &amp;#39;Grade&amp;#39;: &amp;#34;F&amp;#34;, &amp;#39;Comments&amp;#39;: &amp;#34;Hard work is essential&amp;#34;}] # Print list of dicts  print(data) [{&#39;Mark&#39;: 90, &#39;Grade&#39;: &#39;O&#39;, &#39;Comments&#39;: &#39;Best&#39;}, {&#39;Mark&#39;: 75, &#39;Grade&#39;: &#39;A&#39;, &#39;Comments&#39;: &#39;Needs to be immproved&#39;}, {&#39;Mark&#39;: 40, &#39;Grade&#39;: &#39;F&#39;, &#39;Comments&#39;: &#39;Hard work is essential&#39;}]  # Create the pandas DataFrame  data = pd.</description>
    </item>
    
    <item>
      <title>Label Encoding</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/sklearn/label-encoding/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/sklearn/label-encoding/</guid>
      <description># Import pandas library  import pandas as pd# Initialize list of dicts  data = [{&amp;#39;Item&amp;#39;: &amp;#34;Onion&amp;#34;, &amp;#39;Price&amp;#39;: 85}, {&amp;#39;Item&amp;#39;: &amp;#34;Tomato&amp;#34;, &amp;#39;Price&amp;#39;: 80}, {&amp;#39;Item&amp;#39;: &amp;#34;Egg&amp;#34;, &amp;#39;Price&amp;#39;: 5}, {&amp;#39;Item&amp;#39;: &amp;#34;Carrot&amp;#34;, &amp;#39;Price&amp;#39;: 35}, {&amp;#39;Item&amp;#39;: &amp;#34;Cabbage&amp;#34;, &amp;#39;Price&amp;#39;: 30},] # Print list of dicts  print(data) [{&#39;Item&#39;: &#39;Onion&#39;, &#39;Price&#39;: 85}, {&#39;Item&#39;: &#39;Tomato&#39;, &#39;Price&#39;: 80}, {&#39;Item&#39;: &#39;Egg&#39;, &#39;Price&#39;: 5}, {&#39;Item&#39;: &#39;Carrot&#39;, &#39;Price&#39;: 35}, {&#39;Item&#39;: &#39;Cabbage&#39;, &#39;Price&#39;: 30}]  # Create the pandas DataFrame  data = pd.</description>
    </item>
    
    <item>
      <title>Loading Dataset from Sklearn</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/sklearn/loading-dataset-from-sklearn/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/sklearn/loading-dataset-from-sklearn/</guid>
      <description># Loading the iris dataset as an example from Sklearn from sklearn.datasets import load_iris iris = load_iris() # Printing the iris dataset print(iris) {&#39;data&#39;: array([[5.1, 3.5, 1.4, 0.2], [4.9, 3. , 1.4, 0.2], [4.7, 3.2, 1.3, 0.2], [4.6, 3.1, 1.5, 0.2], [5. , 3.6, 1.4, 0.2], [5.4, 3.9, 1.7, 0.4], [4.6, 3.4, 1.4, 0.3], [5. , 3.4, 1.5, 0.2], [4.4, 2.9, 1.4, 0.2], [4.9, 3.1, 1.5, 0.1], [5.4, 3.7, 1.5, 0.</description>
    </item>
    
    <item>
      <title>One Hot Encoding</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/sklearn/one-hot-encoding/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/sklearn/one-hot-encoding/</guid>
      <description># Import pandas and numpy library  import pandas as pd import numpy as np# Initialize list of dicts  data = [{&amp;#39;Item&amp;#39;: &amp;#34;Onion&amp;#34;, &amp;#39;Price&amp;#39;: 85}, {&amp;#39;Item&amp;#39;: &amp;#34;Tomato&amp;#34;, &amp;#39;Price&amp;#39;: 80}, {&amp;#39;Item&amp;#39;: &amp;#34;Egg&amp;#34;, &amp;#39;Price&amp;#39;: 5}, {&amp;#39;Item&amp;#39;: &amp;#34;Carrot&amp;#34;, &amp;#39;Price&amp;#39;: 35}, {&amp;#39;Item&amp;#39;: &amp;#34;Cabbage&amp;#34;, &amp;#39;Price&amp;#39;: 30},] # Print list of dicts  print(data) [{&#39;Item&#39;: &#39;Onion&#39;, &#39;Price&#39;: 85}, {&#39;Item&#39;: &#39;Tomato&#39;, &#39;Price&#39;: 80}, {&#39;Item&#39;: &#39;Egg&#39;, &#39;Price&#39;: 5}, {&#39;Item&#39;: &#39;Carrot&#39;, &#39;Price&#39;: 35}, {&#39;Item&#39;: &#39;Cabbage&#39;, &#39;Price&#39;: 30}]  # Create the pandas DataFrame  data = pd.</description>
    </item>
    
    <item>
      <title>Renaming column names of a Pandas Dataframe</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/renaming-column-names-of-a-pandas-dataframe/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/renaming-column-names-of-a-pandas-dataframe/</guid>
      <description># Import pandas library  import pandas as pd# Initialize list of dicts  data = [{&amp;#39;Mark&amp;#39;: 90, &amp;#39;Grade&amp;#39;: &amp;#34;O&amp;#34;, &amp;#39;Comments&amp;#39;: &amp;#34;Best&amp;#34;}, {&amp;#39;Mark&amp;#39;: 75, &amp;#39;Grade&amp;#39;: &amp;#34;A&amp;#34;, &amp;#39;Comments&amp;#39;: &amp;#34;Needs to be immproved&amp;#34;}] # Print list of dicts  print(data) [{&#39;Mark&#39;: 90, &#39;Grade&#39;: &#39;O&#39;, &#39;Comments&#39;: &#39;Best&#39;}, {&#39;Mark&#39;: 75, &#39;Grade&#39;: &#39;A&#39;, &#39;Comments&#39;: &#39;Needs to be immproved&#39;}]  # Create the pandas DataFrame  data = pd.DataFrame(data, index =[&amp;#39;Stephen&amp;#39;, &amp;#39;Jerry&amp;#39;]) # Print dataframe  print(data)   Mark Grade Comments Stephen 90 O Best Jerry 75 A Needs to be immproved  # Iterating the column names for col in data.</description>
    </item>
    
    <item>
      <title>Unary Operations</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/numpy/unary-operations/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/numpy/unary-operations/</guid>
      <description># Importing numpy library import numpy as np# Creating array object arr = np.array( [[ 71, 82, 53], [ 48, 23, 56]] )# Printing the maximum element in a array print(&amp;#34;Largest element is:&amp;#34;, arr.max()) Largest element is: 82  # Printing row-wise maximum elements print(&amp;#34;Row-wise maximum elements:&amp;#34;, arr.max(axis = 1)) Row-wise maximum elements: [82 56]  # Printing column-wise maximum elements print(&amp;#34;Column-wise maximum elements:&amp;#34;, arr.max(axis = 0)) Column-wise maximum elements: [71 82 56]  # Sum of array elements print(&amp;#34;Sum of all array elements:&amp;#34;, arr.</description>
    </item>
    
    <item>
      <title>Universal Functions</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/numpy/universal-functions/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/numpy/universal-functions/</guid>
      <description># Importing numpy library import numpy as np# Creating array A A = np.array( [[ 71, 82], [ 48, 23]] )# Printing an array of sine values print(&amp;#34;Sine values of array elements:&amp;#34;, np.sin(A)) Sine values of array elements: [[ 0.95105465 0.31322878] [-0.76825466 -0.8462204 ]]  # Printing an array of exponential values print(&amp;#34;Exponent of array elements:&amp;#34;, np.exp(A)) Exponent of array elements: [[6.83767123e+30 4.09399696e+35] [7.01673591e+20 9.74480345e+09]]  # Printing square root of array values print(&amp;#34;Square root of array elements:&amp;#34;, np.</description>
    </item>
    
    <item>
      <title>Making a Pandas DataFrame with two-dimensional list</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/pandas/making-a-pandas-dataframe-with-two-dimensional-list/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/pandas/making-a-pandas-dataframe-with-two-dimensional-list/</guid>
      <description>import pandas as pdlst = [[&amp;#39;Nicole&amp;#39;, &amp;#39;Williamson&amp;#39;, 23], [&amp;#39;William&amp;#39;, &amp;#39;Smith&amp;#39;, 29], [&amp;#39;Nick&amp;#39;, &amp;#39;Fury&amp;#39;, 30], [&amp;#39;Vin&amp;#39;, &amp;#39;williams&amp;#39;, 22]] print(lst) [[&#39;Nicole&#39;, &#39;Williamson&#39;, 23], [&#39;William&#39;, &#39;Smith&#39;, 29], [&#39;Nick&#39;, &#39;Fury&#39;, 30], [&#39;Vin&#39;, &#39;williams&#39;, 22]]  df = pd.DataFrame(lst, columns =[&amp;#39;FirstName&amp;#39;, &amp;#39;LastName&amp;#39;, &amp;#39;Age&amp;#39;]) print(df)  FirstName LastName Age 0 Nicole Williamson 23 1 William Smith 29 2 Nick Fury 30 3 Vin williams 22  </description>
    </item>
    
    <item>
      <title>Python Addition</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/python-addition/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/python-addition/</guid>
      <description>print(&amp;#39;Hello Sanjay&amp;#39;) Hello Sanjay  print(2+2) 4  </description>
    </item>
    
    <item>
      <title>Clearing a list</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/clearing-a-list/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/clearing-a-list/</guid>
      <description># Creating a list  lst = [&amp;#34;Hello&amp;#34;, 26, &amp;#34;Robert&amp;#34;, 1] # Printing the list before clear function print(&amp;#39;lst before clear:&amp;#39;, lst)  lst before clear: [&#39;Hello&#39;, 26, &#39;Robert&#39;, 1]  # Calling the clear() built-in function lst.clear() # Printing the list after claer function print(&amp;#39;lst after clear:&amp;#39;, lst)  lst after clear: []  </description>
    </item>
    
    <item>
      <title>Factorial</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/factorial/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/factorial/</guid>
      <description># Assigning factorial function def factorial(n): if n &amp;lt; 0: return 0 elif n == 0 or n == 1: return 1 else: fact = 1 while(n &amp;gt; 1): fact *= n n -= 1 return fact # Assigning value for factorial function num = 3# Calling factorial function fact = factorial(num) print(&amp;#34;Factorial of&amp;#34;, num, &amp;#34;is&amp;#34;, fact)  Factorial of 3 is 6  </description>
    </item>
    
    <item>
      <title>Finding largest number in a list</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/finding-largest-number-in-a-list/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/finding-largest-number-in-a-list/</guid>
      <description># Creating a list  lst = [53, 26, 14, 91] # Calling the max() built-in function data = max(lst)# Printing the minimum element  print(&amp;#34;The Largest element in a list is:&amp;#34;, data) The Largest element in a list is: 91  </description>
    </item>
    
    <item>
      <title>Finding smallest number in a list</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/finding-smallest-number-in-a-list/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/finding-smallest-number-in-a-list/</guid>
      <description># Creating a list  lst = [53, 26, 14, 91] # Calling the min() built-in function data = min(lst)# Printing the minimum element  print(&amp;#34;The Smallest element in a list is:&amp;#34;, data) The Smallest element in a list is: 14  </description>
    </item>
    
    <item>
      <title>Joining the string</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/joining-the-string/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/joining-the-string/</guid>
      <description># Assigning a string value to the variable input = &amp;#39;New Delhi is the capital of India&amp;#39;# Split the string into words by calling split() built-in function data = input.split(&amp;#39; &amp;#39;)# Print the splitted string print(data) [&#39;New&#39;, &#39;Delhi&#39;, &#39;is&#39;, &#39;the&#39;, &#39;capital&#39;, &#39;of&#39;, &#39;India&#39;]  # Join the string by calling join() built-in function string = &amp;#39;-&amp;#39;.join(data)# Print the joined string print(string) New-Delhi-is-the-capital-of-India  </description>
    </item>
    
    <item>
      <title>Length of a list</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/length-of-a-list/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/length-of-a-list/</guid>
      <description># Assigning an empty list lst = [] # Adding values to empty list lst.append(&amp;#34;Hello&amp;#34;) lst.append(34) lst.append(&amp;#34;Stephen&amp;#34;) lst.append(42.0) # Printing the list print(&amp;#34;The length of list is: &amp;#34;, len(lst))  The length of list is: 4  </description>
    </item>
    
    <item>
      <title>Reversing a list</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/reversing-a-list/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/reversing-a-list/</guid>
      <description># Reversing a list using reverse() assigned in a function def Reverse(lst): lst.reverse() return lst # Assigning values to list lst = [10, 11, 12, 13, 14, 15] # Printing the Reversed list print(Reverse(lst)) [15, 14, 13, 12, 11, 10]  </description>
    </item>
    
    <item>
      <title>Reversing words of a string</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/reversing-words-of-a-string/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/reversing-words-of-a-string/</guid>
      <description># Assigning a string value to the variable input = &amp;#39;New Delhi is the capital of India&amp;#39;# Split the string into words data = input.split(&amp;#39; &amp;#39;)# Calling the reversed() built-in function to reverse the string data = &amp;#39; &amp;#39;.join(reversed(data))# Printing the reversed string print(data) India of capital the is Delhi New  </description>
    </item>
    
    <item>
      <title>Simple Python</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/simple-python/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/simple-python/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Splitting the string</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/splitting-the-string/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/splitting-the-string/</guid>
      <description># Assigning a string value to the variable input = &amp;#39;New Delhi is the capital of India&amp;#39;# Split the string into words by calling split() built-in function data = input.split(&amp;#39; &amp;#39;)# Print the splitted string print(data) [&#39;New&#39;, &#39;Delhi&#39;, &#39;is&#39;, &#39;the&#39;, &#39;capital&#39;, &#39;of&#39;, &#39;India&#39;]  </description>
    </item>
    
    <item>
      <title>Swapping First and Last Elements of a list</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/swapping-first-and-last-elements-of-a-list/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/swapping-first-and-last-elements-of-a-list/</guid>
      <description># Assigning Swap function  def swap(new): new[0], new[-1] = new[-1], new[0] return new# Assigning value for swap function new = [23, 36, 90, 57, 64] # Calling swap function value = (swap(new)) print(&amp;#34;New list will be &amp;#34;, value)  New list will be [64, 36, 90, 57, 23]  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://Sanjay-V.github.io/mlnotes/python/basics/template/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://Sanjay-V.github.io/mlnotes/python/basics/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
  </channel>
</rss>